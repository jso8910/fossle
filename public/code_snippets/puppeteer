import { assert } from './assert.js';
import { CDPSession } from './Connection.js';
import { keyDefinitions, KeyDefinition, KeyInput } from './USKeyboardLayout.js';
import { Protocol } from 'devtools-protocol';
import { Point } from './JSHandle.js';

type KeyDescription = Required<
  Pick<KeyDefinition, 'keyCode' | 'key' | 'text' | 'code' | 'location'>
>;

export class Keyboard {
  private _client: CDPSession;
  _modifiers = 0;
  private _pressedKeys = new Set<string>();

  constructor(client: CDPSession) {
    this._client = client;
  }

  async down(
    key: KeyInput,
    options: { text?: string } = { text: undefined }
  ): Promise<void> {
    const description = this._keyDescriptionForString(key);

    const autoRepeat = this._pressedKeys.has(description.code);
    this._pressedKeys.add(description.code);
    this._modifiers |= this._modifierBit(description.key);

    const text = options.text === undefined ? description.text : options.text;
    await this._client.send('Input.dispatchKeyEvent', {
      type: text ? 'keyDown' : 'rawKeyDown',
      modifiers: this._modifiers,
      windowsVirtualKeyCode: description.keyCode,
      code: description.code,
      key: description.key,
      text: text,
      unmodifiedText: text,
      autoRepeat,
      location: description.location,
      isKeypad: description.location === 3,
    });
  }

  private _modifierBit(key: string): number {
    if (key === 'Alt') return 1;
    if (key === 'Control') return 2;
    if (key === 'Meta') return 4;
    if (key === 'Shift') return 8;
    return 0;
  }

  private _keyDescriptionForString(keyString: KeyInput): KeyDescription {
    const shift = this._modifiers & 8;
    const description = {
      key: '',
      keyCode: 0,
      code: '',
      text: '',
      location: 0,
    };

    const definition = keyDefinitions[keyString];
    assert(definition, `Unknown key: "${keyString}"`);

    if (definition.key) description.key = definition.key;
    if (shift && definition.shiftKey) description.key = definition.shiftKey;

    if (definition.keyCode) description.keyCode = definition.keyCode;
    if (shift && definition.shiftKeyCode)
      description.keyCode = definition.shiftKeyCode;

    if (definition.code) description.code = definition.code;

    if (definition.location) description.location = definition.location;

    if (description.key.length === 1) description.text = description.key;

    if (definition.text) description.text = definition.text;
    if (shift && definition.shiftText) description.text = definition.shiftText;

    if (this._modifiers & ~8) description.text = '';

    return description;
  }

  async up(key: KeyInput): Promise<void> {
    const description = this._keyDescriptionForString(key);

    this._modifiers &= ~this._modifierBit(description.key);
    this._pressedKeys.delete(description.code);
    await this._client.send('Input.dispatchKeyEvent', {
      type: 'keyUp',
      modifiers: this._modifiers,
      key: description.key,
      windowsVirtualKeyCode: description.keyCode,
      code: description.code,
      location: description.location,
    });
  }

  async sendCharacter(char: string): Promise<void> {
    await this._client.send('Input.insertText', { text: char });
  }

  private charIsKey(char: string): char is KeyInput {
    return !!keyDefinitions[char];
  }

  async type(text: string, options: { delay?: number } = {}): Promise<void> {
    const delay = options.delay || null;
    for (const char of text) {
      if (this.charIsKey(char)) {
        await this.press(char, { delay });
      } else {
        if (delay) await new Promise((f) => setTimeout(f, delay));
        await this.sendCharacter(char);
      }
    }
  }

  async press(
    key: KeyInput,
    options: { delay?: number; text?: string } = {}
  ): Promise<void> {
    const { delay = null } = options;
    await this.down(key, options);
    if (delay) await new Promise((f) => setTimeout(f, options.delay));
    await this.up(key);
  }
}

export type MouseButton = 'left' | 'right' | 'middle';

export interface MouseOptions {
  button?: MouseButton;
  clickCount?: number;
}

export interface MouseWheelOptions {
  deltaX?: number;
  deltaY?: number;
}

export class Mouse {
  private _client: CDPSession;
  private _keyboard: Keyboard;
  private _x = 0;
  private _y = 0;
  private _button: MouseButton | 'none' = 'none';

  constructor(client: CDPSession, keyboard: Keyboard) {
    this._client = client;
    this._keyboard = keyboard;
  }

  async move(
    x: number,
    y: number,
    options: { steps?: number } = {}
  ): Promise<void> {
    const { steps = 1 } = options;
    const fromX = this._x,
      fromY = this._y;
    this._x = x;
    this._y = y;
    for (let i = 1; i <= steps; i++) {
      await this._client.send('Input.dispatchMouseEvent', {
        type: 'mouseMoved',
        button: this._button,
        x: fromX + (this._x - fromX) * (i / steps),
        y: fromY + (this._y - fromY) * (i / steps),
        modifiers: this._keyboard._modifiers,
      });
    }
  }

  async click(
    x: number,
    y: number,
    options: MouseOptions & { delay?: number } = {}
  ): Promise<void> {
    const { delay = null } = options;
    if (delay !== null) {
      await this.move(x, y);
      await this.down(options);
      await new Promise((f) => setTimeout(f, delay));
      await this.up(options);
    } else {
      await this.move(x, y);
      await this.down(options);
      await this.up(options);
    }
  }

  async down(options: MouseOptions = {}): Promise<void> {
    const { button = 'left', clickCount = 1 } = options;
    this._button = button;
    await this._client.send('Input.dispatchMouseEvent', {
      type: 'mousePressed',
      button,
      x: this._x,
      y: this._y,
      modifiers: this._keyboard._modifiers,
      clickCount,
    });
  }

  async up(options: MouseOptions = {}): Promise<void> {
    const { button = 'left', clickCount = 1 } = options;
    this._button = 'none';
    await this._client.send('Input.dispatchMouseEvent', {
      type: 'mouseReleased',
      button,
      x: this._x,
      y: this._y,
      modifiers: this._keyboard._modifiers,
      clickCount,
    });
  }

  async wheel(options: MouseWheelOptions = {}): Promise<void> {
    const { deltaX = 0, deltaY = 0 } = options;
    await this._client.send('Input.dispatchMouseEvent', {
      type: 'mouseWheel',
      x: this._x,
      y: this._y,
      deltaX,
      deltaY,
      modifiers: this._keyboard._modifiers,
      pointerType: 'mouse',
    });
  }

  async drag(start: Point, target: Point): Promise<Protocol.Input.DragData> {
    const promise = new Promise<Protocol.Input.DragData>((resolve) => {
      this._client.once('Input.dragIntercepted', (event) =>
        resolve(event.data)
      );
    });
    await this.move(start.x, start.y);
    await this.down();
    await this.move(target.x, target.y);
    return promise;
  }

  async dragEnter(target: Point, data: Protocol.Input.DragData): Promise<void> {
    await this._client.send('Input.dispatchDragEvent', {
      type: 'dragEnter',
      x: target.x,
      y: target.y,
      modifiers: this._keyboard._modifiers,
      data,
    });
  }

  async dragOver(target: Point, data: Protocol.Input.DragData): Promise<void> {
    await this._client.send('Input.dispatchDragEvent', {
      type: 'dragOver',
      x: target.x,
      y: target.y,
      modifiers: this._keyboard._modifiers,
      data,
    });
  }

  async drop(target: Point, data: Protocol.Input.DragData): Promise<void> {
    await this._client.send('Input.dispatchDragEvent', {
      type: 'drop',
      x: target.x,
      y: target.y,
      modifiers: this._keyboard._modifiers,
      data,
    });
  }

  async dragAndDrop(
    start: Point,
    target: Point,
    options: { delay?: number } = {}
  ): Promise<void> {
    const { delay = null } = options;
    const data = await this.drag(start, target);
    await this.dragEnter(target, data);
    await this.dragOver(target, data);
    if (delay) {
      await new Promise((resolve) => setTimeout(resolve, delay));
    }
    await this.drop(target, data);
    await this.up();
  }
}

export class Touchscreen {
  private _client: CDPSession;
  private _keyboard: Keyboard;

  constructor(client: CDPSession, keyboard: Keyboard) {
    this._client = client;
    this._keyboard = keyboard;
  }

  async tap(x: number, y: number): Promise<void> {
    const touchPoints = [{ x: Math.round(x), y: Math.round(y) }];
    await this._client.send('Input.dispatchTouchEvent', {
      type: 'touchStart',
      touchPoints,
      modifiers: this._keyboard._modifiers,
    });
    await this._client.send('Input.dispatchTouchEvent', {
      type: 'touchEnd',
      touchPoints: [],
      modifiers: this._keyboard._modifiers,
    });
  }
}