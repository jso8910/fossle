@Directive({selector: ':not(a):not(area)[routerLink]'})
export class RouterLink implements OnChanges {
  @Input() queryParams?: Params|null;
  @Input() fragment?: string;
  @Input() queryParamsHandling?: QueryParamsHandling|null;
  
  @Input() preserveFragment!: boolean;

  @Input() skipLocationChange!: boolean;

  @Input() replaceUrl!: boolean;
  @Input() state?: {[k: string]: any};
  @Input() relativeTo?: ActivatedRoute|null;

  private commands: any[]|null = null;

  onChanges = new Subject<RouterLink>();

  constructor(
      private router: Router, private route: ActivatedRoute,
      @Attribute('tabindex') private readonly tabIndexAttribute: string|null|undefined,
      private readonly renderer: Renderer2, private readonly el: ElementRef) {
    this.setTabIndexIfNotOnNativeEl('0');
  }


  private setTabIndexIfNotOnNativeEl(newTabIndex: string|null) {
    if (this.tabIndexAttribute != null) {
      return;
    }
    const renderer = this.renderer;
    const nativeElement = this.el.nativeElement;
    if (newTabIndex !== null) {
      renderer.setAttribute(nativeElement, 'tabindex', newTabIndex);
    } else {
      renderer.removeAttribute(nativeElement, 'tabindex');
    }
  }

  ngOnChanges(changes: SimpleChanges) {
    
    
    this.onChanges.next(this);
  }

  @Input()
  set routerLink(commands: any[]|string|null|undefined) {
    if (commands != null) {
      this.commands = Array.isArray(commands) ? commands : [commands];
      this.setTabIndexIfNotOnNativeEl('0');
    } else {
      this.commands = null;
      this.setTabIndexIfNotOnNativeEl(null);
    }
  }

  @HostListener('click')
  onClick(): boolean {
    if (this.urlTree === null) {
      return true;
    }

    const extras = {
      skipLocationChange: coerceToBoolean(this.skipLocationChange),
      replaceUrl: coerceToBoolean(this.replaceUrl),
      state: this.state,
    };
    this.router.navigateByUrl(this.urlTree, extras);
    return true;
  }

  get urlTree(): UrlTree|null {
    if (this.commands === null) {
      return null;
    }
    return this.router.createUrlTree(this.commands, {
      
      
      relativeTo: this.relativeTo !== undefined ? this.relativeTo : this.route,
      queryParams: this.queryParams,
      fragment: this.fragment,
      queryParamsHandling: this.queryParamsHandling,
      preserveFragment: coerceToBoolean(this.preserveFragment),
    });
  }
}

@Directive({selector: 'a[routerLink],area[routerLink]'})
export class RouterLinkWithHref implements OnChanges, OnDestroy {
  
  @HostBinding('attr.target') @Input() target!: string;

  @Input() queryParams?: Params|null;

  @Input() fragment?: string;

  @Input() queryParamsHandling?: QueryParamsHandling|null;
  
  @Input() preserveFragment!: boolean;

  @Input() skipLocationChange!: boolean;
  
  @Input() replaceUrl!: boolean;
  @Input() state?: {[k: string]: any};
  @Input() relativeTo?: ActivatedRoute|null;

  private commands: any[]|null = null;
  private subscription: Subscription;
  
  @HostBinding('attr.href') href: string|null = null;

  onChanges = new Subject<RouterLinkWithHref>();

  constructor(
      private router: Router, private route: ActivatedRoute,
      private locationStrategy: LocationStrategy) {
    this.subscription = router.events.subscribe((s: Event) => {
      if (s instanceof NavigationEnd) {
        this.updateTargetUrlAndHref();
      }
    });
  }

  @Input()
  set routerLink(commands: any[]|string|null|undefined) {
    if (commands != null) {
      this.commands = Array.isArray(commands) ? commands : [commands];
    } else {
      this.commands = null;
    }
  }

  ngOnChanges(changes: SimpleChanges): any {
    this.updateTargetUrlAndHref();
    this.onChanges.next(this);
  }
  ngOnDestroy(): any {
    this.subscription.unsubscribe();
  }

  @HostListener(
      'click',
      ['$event.button', '$event.ctrlKey', '$event.shiftKey', '$event.altKey', '$event.metaKey'])
  onClick(button: number, ctrlKey: boolean, shiftKey: boolean, altKey: boolean, metaKey: boolean):
      boolean {
    if (button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {
      return true;
    }

    if (typeof this.target === 'string' && this.target != '_self' || this.urlTree === null) {
      return true;
    }

    const extras = {
      skipLocationChange: coerceToBoolean(this.skipLocationChange),
      replaceUrl: coerceToBoolean(this.replaceUrl),
      state: this.state
    };
    this.router.navigateByUrl(this.urlTree, extras);
    return false;
  }

  private updateTargetUrlAndHref(): void {
    this.href = this.urlTree !== null ?
        this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree)) :
        null;
  }

  get urlTree(): UrlTree|null {
    if (this.commands === null) {
      return null;
    }
    return this.router.createUrlTree(this.commands, {
      
      
      relativeTo: this.relativeTo !== undefined ? this.relativeTo : this.route,
      queryParams: this.queryParams,
      fragment: this.fragment,
      queryParamsHandling: this.queryParamsHandling,
      preserveFragment: coerceToBoolean(this.preserveFragment),
    });
  }
}